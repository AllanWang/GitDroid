// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath kau.Plugins.android
        classpath kau.Plugins.kotlin
        classpath kau.Plugins.bugsnag
        classpath kau.Plugins.spotless
        classpath kau.Plugins.dexCount
        classpath kau.Plugins.gitVersion
        classpath "com.apollographql.apollo:apollo-gradle-plugin:${Versions.apollo}"
        classpath "com.squareup.sqldelight:gradle-plugin:${Versions.sqlDelight}"
    }

    wrapper.setDistributionType(Wrapper.DistributionType.ALL)
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ['-XXLanguage:+InlineClasses']
    }
}

subprojects {
    def projectName = it.name

    switch (projectName) {
        case "gradle-plugin":
            return
        case "app":
            apply plugin: 'com.android.application'
            break
        default:
            apply plugin: 'com.android.library'
    }

    if (projectName == 'data') {
        apply plugin: 'com.apollographql.android'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'com.gladed.androidgitversion'
    apply plugin: 'com.getkeepsafe.dexcount'

    android {
        compileSdkVersion Versions.targetSdk
        buildToolsVersion kau.Versions.buildTools

        androidGitVersion {
            codeFormat = 'MMNNPPXX'
            format = '%tag%%-count%%-commit%'
            prefix 'v'
        }

        defaultConfig {
            minSdkVersion Versions.minSdk
            targetSdkVersion Versions.targetSdk
            versionCode androidGitVersion.code()
            versionName androidGitVersion.name()

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        }

        lintOptions {
            warningsAsErrors true
            disable 'TrustAllX509TrustManager',
                    'UnusedResources',
                    'ContentDescription',
                    'RtlSymmetry',
                    'MissingTranslation'

            xmlReport false
            textReport true
            textOutput 'stdout'
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        sourceSets {
            main.java.srcDirs += 'src/main/kotlin'
            test.java.srcDirs += 'src/test/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }

        packagingOptions {
            pickFirst 'META-INF/core_release.kotlin_module'
            pickFirst 'META-INF/library_release.kotlin_module'
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        testOptions.unitTests {
            includeAndroidResources = true
            // Don't throw runtime exceptions for android calls that are not mocked
            returnDefaultValues = true

            // Always show the result of every unit test, even if it passes.
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }

    androidExtensions {
        experimental = true
        features = ["parcelize"]
    }

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        if (projectName != 'core') {
            implementation project(':core')
        }
        implementation kau.Dependencies.kotlin
        implementation "org.koin:koin-android:${Versions.koin}"
        implementation kau.Dependencies.coroutines
        //noinspection GradleDependency
        implementation "ca.allanwang.kau:core:${KAU}"

        testImplementation "org.koin:koin-test:${Versions.koin}"
        testImplementation kau.Dependencies.kotlinTest

        androidTestImplementation kau.Dependencies.kotlinTest
        androidTestImplementation kau.Dependencies.espresso
        androidTestImplementation kau.Dependencies.testRules
        androidTestImplementation kau.Dependencies.testRunner
        androidTestImplementation kau.Dependencies.kotlinReflect
    }

    def kotlinResolutions = ['kotlin-reflect',
                              'kotlin-stdlib',
                              'kotlin-stdlib-jdk7',
                              'kotlin-stdlib-jdk8',
                              'kotlin-test',
                              'kotlin-test-junit4',
                              'kotlin-test-junit5']

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name in kotlinResolutions) {
                details.useVersion kau.Versions.kotlin
            }
        }
    }
}