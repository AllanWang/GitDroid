android {

    def privPropFile = file('../priv.properties')
    def privProps = new Properties()

    if (privPropFile.exists()) {
        privPropFile.withInputStream { privProps.load(it) }
    } else {
        println("WARNING: Private properties not found")
    }

    defaultConfig {
        buildConfigField "String", "GITHUB_CLIENT_ID", "\"${privProps.getProperty('GITHUB_CLIENT_ID', 'NA')}\""
        buildConfigField "String", "GITHUB_CLIENT_SECRET", "\"${privProps.getProperty('GITHUB_CLIENT_SECRET', 'NA')}\""
        buildConfigField "String", "GITHUB_CLIENT_REDIRECT", "\"${privProps.getProperty('GITHUB_CLIENT_REDIRECT', 'NA')}\""
    }
}

apollo {
    customTypeMapping = [
            // Using java uri to support non android unit tests
            "URI" : "java.net.URI",
            // TEMP https://github.com/apollographql/apollo-android/issues/1380
//            "Date": "java.lang.String",
            "Date": "ca.allanwang.gitdroid.data.helpers.DateWrapper",
//            "Date": "java.util.Date",
            "DateTime": "java.util.Date",
            "Object": "java.lang.String"
    ]
    useJavaBeansSemanticNaming = true
}

repositories {
    maven { url "https://dl.bintray.com/apollographql/android" }
}

dependencies {
    implementation "com.apollographql.apollo:apollo-runtime:${Versions.apollo}"
    implementation "com.apollographql.apollo:apollo-coroutines-support:${Versions.apollo}"
    implementation "com.apollographql.apollo:apollo-http-cache:${Versions.apollo}"
    implementation "com.squareup.retrofit2:retrofit:${Versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${Versions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${Versions.okhttp}"
    implementation "com.squareup.moshi:moshi-kotlin:${Versions.moshi}"
}
